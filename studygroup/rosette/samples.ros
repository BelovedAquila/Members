;;; test Bank acount actor example

(defOprn withdraw) 
(defOprn deposit) 
(defActor BankAccount (slots& balance 0) 
(method (withdraw amount) 
(cond ((<= amount balance) 
(update balance (- balance amount)) 
[withdrew amount]) 
((> amount balance) 
(update) 
[overdraft (- amount balance)]))) 
(method (deposit amount) 
(update balance (+ balance amount)) 
[deposited amount]
)
)

::: add a method to an existing actor

(defOprn balance)
(defMethod BankAccount (balance) balance)

;; DEBUG

(defOprn assets)
(defActor JimScarver (slots& bankaccount (new BankAccount 1000.00))  
(method (assets)
[bankaccount (bankaccount balance)]
)
) 

;; factorial using continuations
(defProc (kfact n k) (if (< n 2) (k 1) (kfact (- n 1) (proc [x] (k (* n x))))))

(kfact 2 print)  (kfact 1 (proc[2] (print (* 1 2)))))
(kfact 3 print)  ((kfact 2 (proc[3] (print (* (* 1 2) 3)))))

;;; program as data, extend JimScarver actor; hello method;  realestate asset.

;;; This is the Rosette source that was produced from Kent's helloWorld contract in Rholang

(defOprn HelloWorld)
(defActor HelloWorldContract
	(method (HelloWorld world1 world2)
		(let[[[[[dd66c1eab1eb_binding] 8419030e6f88]] (consume t world1 'msg)]]
			((proc [dd66c1eab1eb] (produce t world2 'msg dd66c1eab1eb)) 8419030e6f88))))
      
;;; as of June 10, 2017, "consume" and "produce" hadn't been defined in the Rosette code.  


